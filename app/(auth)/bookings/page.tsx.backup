'use client';

import { useEffect, useState } from 'react';
import { useConnectedUser } from '@/app/hooks/useConnectedUser';
import { Booking, BookingWithoutId, MergeBooking } from '@/app/types/booking';
import { Licensee } from '@/app/types/licensee';
import { getCourtNumberFromClubId } from '@/app/services/config';
import QRCodeModal from '@/app/components/QRCodeModal';
import { useUserRights } from '@/app/hooks/useUserRights';

export default function BookingsPage() {
  // Test hot reload
  const user = useConnectedUser();
  const { isPowerUser } = useUserRights();
  const [activeTab, setActiveTab] = useState<'my-bookings' | 'all-bookings' | 'merge-bookings'>('my-bookings');
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [bookingsWithoutId, setBookingsWithoutId] = useState<BookingWithoutId[]>([]);
  const [mergeBookings, setMergeBookings] = useState<MergeBooking[]>([]);
  const [licensees, setLicensees] = useState<Licensee[]>([]);
  const [loading, setLoading] = useState(true);
  const [loadingWithoutId, setLoadingWithoutId] = useState(false);
  const [loadingMerge, setLoadingMerge] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [errorWithoutId, setErrorWithoutId] = useState<string | null>(null);
  const [errorMerge, setErrorMerge] = useState<string | null>(null);
  const [qrCodeModal, setQrCodeModal] = useState({
    isOpen: false,
    loading: false,
    qrCodeUri: null as string | null
  });
  const [deleteModal, setDeleteModal] = useState({
    isOpen: false,
    booking: null as Booking | null,
    loading: false,
    error: null as string | null
  });

  useEffect(() => {
    const fetchData = async () => {
      if (!user?.userId) {
        setError('Utilisateur non connecté');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        setError(null);
        
        // Récupérer les licenciés et les réservations en parallèle
        const [licenseesResponse, bookingsResponse] = await Promise.all([
          fetch('/api/licensees'),
          fetch(`/api/bookings?userId=${user.userId}&fromDate=${new Date().toISOString()}`)
        ]);
        
        if (!licenseesResponse.ok) {
          throw new Error('Erreur lors de la récupération des licenciés');
        }
        
        if (!bookingsResponse.ok) {
          throw new Error('Erreur lors de la récupération des réservations');
        }
        
        const [licenseesData, bookingsData] = await Promise.all([
          licenseesResponse.json(),
          bookingsResponse.json()
        ]);
        
        console.log('Licenciés récupérés:', licenseesData.length);
        console.log('Réservations récupérées:', bookingsData.length);
        console.log('ClubIds dans les réservations:', bookingsData.map((b: Booking) => b.clubId));
        
        setLicensees(licenseesData);
        
        // Trier les réservations par date (les plus proches en premier)
        const sortedBookings = bookingsData.sort((a: Booking, b: Booking) => 
          new Date(a.startDate).getTime() - new Date(b.startDate).getTime()
        );
        setBookings(sortedBookings);
      } catch (err) {
        console.error('Erreur lors du chargement des données:', err);
        setError(err instanceof Error ? err.message : 'Une erreur est survenue');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [user?.userId]);

  // Fonction pour charger les bookings sans ID
  const fetchBookingsWithoutId = async () => {
    try {
      setLoadingWithoutId(true);
      setErrorWithoutId(null);
      
      const response = await fetch('/api/bookingWithoutId');
      
      if (!response.ok) {
        throw new Error('Erreur lors de la récupération des réservations');
      }
      
      const data = await response.json();
      setBookingsWithoutId(data);
    } catch (err) {
      console.error('Erreur lors du chargement des réservations sans ID:', err);
      setErrorWithoutId(err instanceof Error ? err.message : 'Une erreur est survenue');
    } finally {
      setLoadingWithoutId(false);
    }
  };

  // Charger les bookings sans ID quand on passe sur l'onglet "all-bookings"
  useEffect(() => {
    if (activeTab === 'all-bookings' && bookingsWithoutId.length === 0 && !loadingWithoutId) {
      fetchBookingsWithoutId();
    }
  }, [activeTab, bookingsWithoutId.length, loadingWithoutId]);

  // Fonction pour charger les merge bookings
  const fetchMergeBookings = async () => {
    try {
      setLoadingMerge(true);
      setErrorMerge(null);
      
      const response = await fetch('/api/allBookings');
      
      if (!response.ok) {
        throw new Error('Erreur lors de la récupération des réservations fusionnées');
      }
      
      const data = await response.json();
      setMergeBookings(data);
    } catch (err) {
      console.error('Erreur lors du chargement des réservations fusionnées:', err);
      setErrorMerge(err instanceof Error ? err.message : 'Une erreur est survenue');
    } finally {
      setLoadingMerge(false);
    }
  };

  // Charger les merge bookings quand on passe sur l'onglet "merge-bookings"
  useEffect(() => {
    if (activeTab === 'merge-bookings' && mergeBookings.length === 0 && !loadingMerge) {
      fetchMergeBookings();
    }
  }, [activeTab, mergeBookings.length, loadingMerge]);

  const handleDelete = (booking: Booking) => {
    setDeleteModal({
      isOpen: true,
      booking: booking,
      loading: false,
      error: null
    });
  };

  const confirmDelete = async () => {
    if (!deleteModal.booking) return;

    setDeleteModal(prev => ({ ...prev, loading: true, error: null }));

    try {
      if (!user?.userId) {
        throw new Error('Utilisateur non connecté');
      }

      // Si l'utilisateur n'a pas de droits POWER_USER, utiliser toujours l'utilisateur connecté
      const userIdToUse = isPowerUser() ? deleteModal.booking.userId : user.userId;

      const response = await fetch(`/api/reservations/${deleteModal.booking.sessionId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: userIdToUse,
          partnerId: deleteModal.booking.partnerId,
          startDate: new Date(deleteModal.booking.startDate).toISOString()
        }),
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error?.message || 'Erreur lors de la suppression');
      }

      // Recharger les données après suppression
      const fetchData = async () => {
        try {
          const bookingsResponse = await fetch(`/api/bookings?userId=${user.userId}&fromDate=${new Date().toISOString()}`);
          if (bookingsResponse.ok) {
            const bookingsData = await bookingsResponse.json();
            const sortedBookings = bookingsData.sort((a: Booking, b: Booking) => 
              new Date(a.startDate).getTime() - new Date(b.startDate).getTime()
            );
            setBookings(sortedBookings);
          }
        } catch (err) {
          console.error('Erreur lors du rechargement des données:', err);
        }
      };

      await fetchData();
      
      setDeleteModal({
        isOpen: false,
        booking: null,
        loading: false,
        error: null
      });
    } catch (err) {
      setDeleteModal(prev => ({
        ...prev,
        loading: false,
        error: err instanceof Error ? err.message : 'Une erreur est survenue'
      }));
    }
  };

  const closeDeleteModal = () => {
    setDeleteModal({
      isOpen: false,
      booking: null,
      loading: false,
      error: null
    });
  };

  const handleQRCode = async (bookingId: string) => {
    console.log('Afficher le QR code pour:', bookingId);
    
    setQrCodeModal({
      isOpen: true,
      loading: true,
      qrCodeUri: null
    });

    try {
      const response = await fetch(`/api/bookings/qr-code?bookingId=${bookingId}`);
      
      if (!response.ok) {
        throw new Error('Erreur lors de la récupération du QR code');
      }

      const data = await response.json();
      
      setQrCodeModal({
        isOpen: true,
        loading: false,
        qrCodeUri: data.qrCodeUri
      });
    } catch (error) {
      console.error('Erreur lors de la récupération du QR code:', error);
      setQrCodeModal({
        isOpen: true,
        loading: false,
        qrCodeUri: null
      });
    }
  };

  const closeQRCodeModal = () => {
    setQrCodeModal({
      isOpen: false,
      loading: false,
      qrCodeUri: null
    });
  };

  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('fr-FR', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return dateString;
    }
  };

  const formatCreatedAt = (dateString: string) => {
    try {
      if (!dateString) {
        return 'Date inconnue';
      }
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        return 'Date invalide';
      }
      return date.toLocaleDateString('fr-FR', {
        day: '2-digit',
        month: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return 'Date invalide';
    }
  };

  const getUserName = (userId: string): string => {
    if (!userId) {
      return 'Utilisateur inconnu';
    }
    const licensee = licensees.find(l => l.userId === userId);
    if (licensee) {
      return `${licensee.firstName} ${licensee.lastName}`;
    }
    return `ID: ${userId.slice(-8)}`;
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-center items-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-50 border border-red-200 rounded-md p-4">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">
                Erreur
              </h3>
              <div className="mt-2 text-sm text-red-700">
                {error}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const renderTabContent = () => {
    if (activeTab === 'my-bookings') {
      return (
        <>
          {bookings.length === 0 ? (
            <div className="text-center py-12">
              <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
              <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-white">
                Aucune réservation
              </h3>
              <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                Vous n&apos;avez pas de réservations à venir.
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {bookings.map((booking) => (
                <div
                  key={booking.bookingId}
                  className="bg-white dark:bg-gray-800 shadow rounded-lg border border-gray-200 dark:border-gray-700 p-6"
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3">
                        <div className="flex-shrink-0">
                          <div className="w-3 h-3 bg-green-400 rounded-full"></div>
                        </div>
                        <div>
                          <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                            Réservation #{booking.bookingId.slice(-8)}
                          </h3>
                          <p className="text-sm text-gray-500 dark:text-gray-400">
                            Session: {booking.sessionId.slice(-8)} • Prise par {getUserName(user?.userId || '')}
                          </p>
                        </div>
                      </div>
                      
                      <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                            Date et heure
                          </p>
                          <p className="text-sm text-gray-900 dark:text-white">
                            {formatDate(booking.startDate)}
                          </p>
                        </div>
                        
                           <div>
                             <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                               Court {getCourtNumberFromClubId(booking.clubId)}
                             </p>
                           </div>
                        
                        <div>
                          <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                            Utilisateur
                          </p>
                          <p className="text-sm text-gray-900 dark:text-white">
                            {getUserName(booking.userId)}
                          </p>
                        </div>
                        
                        <div>
                          <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                            Partenaire
                          </p>
                          <p className="text-sm text-gray-900 dark:text-white">
                            {getUserName(booking.partnerId)}
                          </p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex space-x-2 ml-4">
                      <button
                        onClick={() => handleQRCode(booking.bookingId)}
                        className="inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                      >
                        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h4M4 8h4m-4 8h4m8-8h4M4 4h4m8 0h4M8 20h4m-4-8h4m8 0h4" />
                        </svg>
                        QR Code
                      </button>
                      
                      <button
                        onClick={() => handleDelete(booking)}
                        className="inline-flex items-center px-3 py-2 border border-red-300 dark:border-red-600 shadow-sm text-sm leading-4 font-medium rounded-md text-red-700 dark:text-red-400 bg-white dark:bg-gray-700 hover:bg-red-50 dark:hover:bg-red-900/20 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                      >
                        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Supprimer
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </>
      );
    } else {
      // Onglet "Mes réservations quelque soit le nom"
      if (loadingWithoutId) {
        return (
          <div className="flex justify-center items-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          </div>
        );
      }

      if (errorWithoutId) {
        return (
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">
                  Erreur
                </h3>
                <div className="mt-2 text-sm text-red-700">
                  {errorWithoutId}
                </div>
              </div>
            </div>
          </div>
        );
      }

      if (bookingsWithoutId.length === 0) {
        return (
          <div className="text-center py-12">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
            </svg>
            <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-white">
              Aucune réservation
            </h3>
            <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
              Vous n&apos;avez pas fait de réservations pour d&apos;autres joueurs.
            </p>
          </div>
        );
      }

      return (
        <div className="space-y-4">
          {bookingsWithoutId.map((booking, index) => (
            <div
              key={`${booking.sessionId}-${index}`}
              className="bg-white dark:bg-gray-800 shadow rounded-lg border border-gray-200 dark:border-gray-700 p-6"
            >
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <div className="flex items-center space-x-3">
                    <div className="flex-shrink-0">
                      <div className="w-3 h-3 bg-blue-400 rounded-full"></div>
                    </div>
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                        Réservation #{booking.sessionId.slice(-8)}
                      </h3>
                      <p className="text-sm text-gray-500 dark:text-gray-400">
                        Session: {booking.sessionId.slice(-8)} • Prise par {getUserName(booking.bookingActionUserId)} le {formatCreatedAt(booking.createdAt)}
                      </p>
                    </div>
                  </div>
                  
                  <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        Date et heure
                      </p>
                      <p className="text-sm text-gray-900 dark:text-white">
                        {formatDate(booking.startDate)}
                      </p>
                    </div>
                    
                    <div>
                      <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        Court {getCourtNumberFromClubId(booking.clubId)}
                      </p>
                    </div>
                    
                    <div>
                      <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        Utilisateur
                      </p>
                      <p className="text-sm text-gray-900 dark:text-white">
                        {getUserName(booking.userId)}
                      </p>
                    </div>
                    
                    <div>
                      <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        Partenaire
                      </p>
                      <p className="text-sm text-gray-900 dark:text-white">
                        {getUserName(booking.partnerId)}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      );
    } else if (activeTab === 'all-bookings') {
      // Onglet "Mes réservations quelque soit le nom"
      if (loadingWithoutId) {
        return (
          <div className="flex justify-center items-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          </div>
        );
      }

      if (errorWithoutId) {
        return (
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">
                  Erreur
                </h3>
                <div className="mt-2 text-sm text-red-700">
                  {errorWithoutId}
                </div>
              </div>
            </div>
          </div>
        );
      }

      if (bookingsWithoutId.length === 0) {
        return (
          <div className="text-center py-12">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
            </svg>
            <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-white">
              Aucune réservation
            </h3>
            <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
              Vous n&apos;avez pas fait de réservations pour d&apos;autres joueurs.
            </p>
          </div>
        );
      }

      return (
        <div className="space-y-4">
          {bookingsWithoutId.map((booking, index) => (
            <div
              key={`${booking.sessionId}-${index}`}
              className="bg-white dark:bg-gray-800 shadow rounded-lg border border-gray-200 dark:border-gray-700 p-6"
            >
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <div className="flex items-center space-x-3">
                    <div className="flex-shrink-0">
                      <div className="w-3 h-3 bg-blue-400 rounded-full"></div>
                    </div>
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                        Réservation #{booking.sessionId.slice(-8)}
                      </h3>
                      <p className="text-sm text-gray-500 dark:text-gray-400">
                        Session: {booking.sessionId.slice(-8)} • Prise par {getUserName(booking.bookingActionUserId)} le {formatCreatedAt(booking.createdAt)}
                      </p>
                    </div>
                  </div>
                  
                  <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        Date et heure
                      </p>
                      <p className="text-sm text-gray-900 dark:text-white">
                        {formatDate(booking.startDate)}
                      </p>
                    </div>
                    
                    <div>
                      <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        Court {getCourtNumberFromClubId(booking.clubId)}
                      </p>
                    </div>
                    
                    <div>
                      <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        Utilisateur
                      </p>
                      <p className="text-sm text-gray-900 dark:text-white">
                        {getUserName(booking.userId)}
                      </p>
                    </div>
                    
                    <div>
                      <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        Partenaire
                      </p>
                      <p className="text-sm text-gray-900 dark:text-white">
                        {getUserName(booking.partnerId)}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      );
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Onglets */}
      <div className="mb-6">
        <div className="border-b border-gray-200 dark:border-gray-700">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => setActiveTab('my-bookings')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'my-bookings'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                  : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600'
              }`}
            >
              Mes réservations à mon nom
            </button>
            <button
              onClick={() => setActiveTab('all-bookings')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'all-bookings'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                  : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600'
              }`}
            >
              Mes réservations quelque soit le nom
            </button>
            <button
              onClick={() => setActiveTab('merge-bookings')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'merge-bookings'
                  ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                  : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600'
              }`}
            >
              Toutes mes réservations
            </button>
          </nav>
        </div>
      </div>

      {/* Contenu des onglets */}
      {renderTabContent()}
         
         <QRCodeModal
           isOpen={qrCodeModal.isOpen}
           onClose={closeQRCodeModal}
           qrCodeUri={qrCodeModal.qrCodeUri}
           loading={qrCodeModal.loading}
         />

         {/* Modal de suppression */}
         {deleteModal.isOpen && deleteModal.booking && (
           <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
             <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
               <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
                 Supprimer la réservation
               </h2>
               <p className="mb-4 text-gray-700 dark:text-gray-300">
                 Êtes-vous sûr de vouloir supprimer la réservation du{' '}
                 <strong>{formatDate(deleteModal.booking.startDate)}</strong> ?
               </p>
               {deleteModal.error && (
                 <div className="mb-4 p-3 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300 rounded">
                   {deleteModal.error}
                 </div>
               )}
               <div className="flex justify-end gap-2">
                 <button
                   onClick={closeDeleteModal}
                   className="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
                   disabled={deleteModal.loading}
                 >
                   Annuler
                 </button>
                 <button
                   onClick={confirmDelete}
                   className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 disabled:opacity-50"
                   disabled={deleteModal.loading}
                 >
                   {deleteModal.loading ? 'Suppression...' : 'Supprimer'}
                 </button>
               </div>
             </div>
           </div>
         )}
       </div>
     );
   }
